version: '2'

services:
  redis:
    restart: always
    image: sameersbn/redis:latest
    networks:
      cicd:
          ipv4_address: 172.19.0.5
    command:
    - --loglevel warning
    ports:
    - '6379:6379'
    volumes:
    - /srv/docker/gitlab/redis:/var/lib/redis:Z
  postgresql:
    restart: always
    image: 'postgres:12.1-alpine'
    networks:
      cicd:
          ipv4_address: 172.19.0.4
    volumes:
    - /srv/docker/gitlab/postgresql:/var/lib/postgresql:Z
    ports:
    - '5432:5432'
    environment:
    - DB_USER=gitlab
    - DB_PASS=password
    - DB_NAME=gitlabhq_production
    - DB_EXTENSION=pg_trgm
  gitlab:
    restart: always
    image: gitlab/gitlab-ce:13.5.1-ce.0
    networks:
      cicd:
          ipv4_address: 172.19.0.3
          aliases:
          - gitlab_com
    depends_on:
    - redis
    - postgresql
    ports:
    - "10022:22"
    - "80:80"
    - "443:443"
    - "5000:5000"
    volumes:
    - gitlab-data:/home/git/data:Z
    - gitlab-logs:/var/log/gitlab
    - ./certs:/certs

    environment:
        # template .rb >> https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template
        # variaveis do pipeline >> https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
        GITLAB_OMNIBUS_CONFIG: |
        
            # Caso seja necessário recriar os certificados
            # gitlab-ctl renew-le-certs
            # Folder: /etc/gitlab/ssl/
            # gitlab-ctl reconfigure
            #letsencrypt['enable'] = true                     
            external_url = "http://172.19.0.3"        
            #letsencrypt['contact_emails'] = ['root@example.com'] 
            #letsencrypt['auto_renew_hour'] = "12"
            #letsencrypt['auto_renew_minute'] = "30"
            #letsencrypt['auto_renew_day_of_month'] = "*/7"       
            #nginx['redirect_http_to_https'] = false
            #nginx['redirect_http_to_https_port'] = 80

            #gitlab_rails['initial_root_password'] = "1234567890"
            
            gitlab_rails['auto_migrate'] = true
            gitlab_rails['db_username'] = "postgres"
            gitlab_rails['db_password'] = "password"
            gitlab_rails['db_host'] = "172.19.0.4"
            gitlab_rails['db_port'] = "5432"
            gitlab_rails['db_database'] = "postgres"
            gitlab_rails['db_adapter'] = "postgresql"
            gitlab_rails['db_encoding'] = "utf8"
            
            redis['enable'] = false
            gitlab_rails['redis_host'] = "172.19.0.5"
            gitlab_rails['redis_port'] = "6379"
            gitlab_rails['redis_enable_client'] = true

          
            # Configuracao do arquivo /etc/gitlab/gitlab.rb - necessário reiniciar  gitlab-ctl restart
            gitlab_rails['registry_enabled'] = true     

            registry_external_url "http://172.19.0.3:5000" 
            registry['enable'] = true
            registry['env'] = { "REGISTRY_HTTP_RELATIVEURLS" => true}
            
            registry['registry_http_addr'] = "172.19.0.3:5000"
            registry_nginx['listen_port'] = 5000
            registry_nginx['enable'] = false
            
  ci_runner:
    # Variaveis necessarias pra pipeline do Gitlab
    #     KS8_APP          = teste-api
    #     KS8_NAMESPACE     = ambiente-desenvolvimento
    #     KUBE_CREDENTIALS = Kubeconfig convertido para base 64
    #     REGISTRY_PORT    = 5000
    #     REGISTRY_REPO    = 172.19.0.3
    # 1 - Adicionar policy no arquivo >> vi etc/gitlab-runner/config.toml >> adicionar a linha pull_policy = "if-not-present" no nó [runners.docker] para que nào seja necesário realizar o pull de uma imagem já existente 
    # 2 - Adicionar a linha no arquivo >> "/etc/gitlab-runner/config.toml" >> clone_url = "http://172.30.xx.xx"
    # 
    # Problemas de certificado:
    # - Registrar com certificado - gitlab-runner register --tls-cert-file /certs/172.19.0.3.crt --tls-key-file /certs/172.19.0.3.key
    # - Verificar se o certificado está correto >> openssl s_client -CAfile 172.19.0.3.crt -connect 172.19.0.3:443
    image: gitlab/gitlab-runner:alpine
    depends_on:
    - gitlab
    restart: always
    volumes:
    - runner-data:/etc/gitlab-runner:Z
    - /var/run/docker.sock:/var/run/docker.sock
    - ./certs:/certs
    networks:
      cicd:
        ipv4_address: 172.19.0.9
        aliases:
        - runner_com
    environment:
    - DOCKER_HOST=tcp://dind:2375
    - DOCKER_CLI_EXPERIMENTAL=enabled
    - GIT_SSL_NO_VERIFY=true
  jenkins:
    image: jenkins/jenkins:lts
    networks:
      cicd:
        ipv4_address: 172.19.0.2
        aliases:
        - jenkins_com
    privileged: true
    restart: always
    user: root
    ports:
    - 8083:8080
    - 50000:50000
    volumes:
    - ~/jenkins_data:/var/jenkins_home
    - /var/run/docker.sock:/var/run/docker.sock
    - ./data/scripts:/usr/sbin/init
#    entrypoint: /usr/sbin/init/install_docker.sh
#    environment:
#    - DOCKER_HOST=tcp://172.19.0.8:2376
#    - DOCKER_CERT_PATH=/certs/client
#    - DOCKER_TLS_CERTDIR=/certs/client
#    - DOCKER_TLS_VERIFY=1
#    group_add:
#    - 998 #docker group id
#    command: /bin/sh -c "/usr/sbin/init/install_docker.sh"
  dind:

    # https://piotrminkowski.wordpress.com/tag/continuous-delivery/
    # https://www.youtube.com/watch?v=GLiCeMO35qE
    # Essa imagem precisou se criada do zero para atender a registrys não seguros
    #   para isso foi usada como base a imagem do enderećo https://github.com/piomin/jenkins-slave-dind-jnlp
    # Comando para visualizar os registryes inseguros
    # >> docker info| grep -A 20 "Insecure Registries"
    #image: piomin/jenkins-slave-dind-jnlp 
    build: 
      context: ./JenkinsAgenteImage
      dockerfile: Dockerfile-criacao
    depends_on:
    - jenkins
    networks:
      cicd:
        ipv4_address: 172.19.0.8
    environment:
    - JENKINS_SLAVE_SECRET=b7fe13b367b97e2f5174badc8b64cee8e23035ad4254a40411426a9c2590bf0c
    - JENKINS_SLAVE_NAME=dind-node
    - JENKINS_URL=http://jenkins_com:8080
    - CI_SERVER_URL=http://gitlab
#    - REGISTRATION_TOKEN=
    privileged: true
  rancher:
    # usuario: rancher
    image: rancher/rancher
    entrypoint: ["entrypoint.sh", "--no-cacerts"]
    privileged: true
    networks:
      cicd:
        ipv4_address: 172.19.0.10
    ports:
      - 81:80
      - 442:443
    volumes:
      - rancher-data:/var/lib/rancher:Z
      
networks:
  cicd:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.19.0.0/24
          gateway: 172.19.0.1
volumes:
    gitlab-data:
    gitlab-logs:
    postgresql:
    redis:
    rancher-data:
    runner-data:
