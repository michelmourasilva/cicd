version: '2'

services:
  redis:
    restart: always
    image: sameersbn/redis:latest
    networks:
      cicd:
          ipv4_address: 172.19.0.5
    command:
    - --loglevel warning
    ports:
    - '6379:6379'
    volumes:
    - /srv/docker/gitlab/redis:/var/lib/redis:Z
  postgresql:
    restart: always
    image: 'postgres:12.1-alpine'
    networks:
      cicd:
          ipv4_address: 172.19.0.4
    volumes:
    - /srv/docker/gitlab/postgresql:/var/lib/postgresql:Z
    ports:
    - '5432:5432'
    environment:
    - DB_USER=gitlab
    - DB_PASS=password
    - DB_NAME=gitlabhq_production
    - DB_EXTENSION=pg_trgm
  gitlab:
    restart: always
    image: gitlab/gitlab-ce:13.5.1-ce.0
    networks:
      cicd:
          ipv4_address: 172.19.0.3
          aliases:
          - gitlab_com
    depends_on:
    - redis
    - postgresql
#    external_links:
#    - "registry:registry"
    ports:
    - "10022:22"
    - "80:80"
    - "443:443"
    - "5000:5000"
    expose:
    - "5000"
    volumes:
    - gitlab-data:/home/git/data:Z
    - gitlab-logs:/var/log/gitlab
    - ./certs:/certs

    environment:
        # template .rb >> https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template
        GITLAB_OMNIBUS_CONFIG: |
        
            gitlab_rails['initial_root_password'] = "23071223"
        
        
            gitlab_rails['auto_migrate'] = true
            gitlab_rails['db_username'] = "postgres"
            gitlab_rails['db_password'] = "password"
            gitlab_rails['db_host'] = "172.19.0.4"
            gitlab_rails['db_port'] = "5432"
            gitlab_rails['db_database'] = "postgres"
            gitlab_rails['db_adapter'] = "postgresql"
            gitlab_rails['db_encoding'] = "utf8"
            
            redis['enable'] = false
            gitlab_rails['redis_host'] = "172.19.0.5"
            gitlab_rails['redis_port'] = "6379"
            gitlab_rails['redis_enable_client'] = true


            # Documentaćão da arquitetura Registry/Gitlab >> https://docs.gitlab.com/omnibus/architecture/registry/            
            # Enderećo que aparece no site do gitlab para poder realizar o login no regyster
            registry_external_url "http://172.19.0.7:9001" 
            gitlab_rails['registry_enabled'] = true
            gitlab_rails['registry_host'] = "172.19.0.7"
            gitlab_rails['registry_port'] = "9001"            
            
            # Pagina dentro do gitlab, é executada quando abre a općão de container register / correto
            gitlab_rails['registry_api_url'] = "http://localhost:5000"
            
            # Essa chave tem que ser criada dentro do Registry
            gitlab_rails['registry_key_path'] = "/certs/registry.key" 
            
            # Configuraćão que deve ser igual a do Registry
            gitlab_rails['registry_issuer'] = "gitlab-issuer"            
            
            #registry['registry_http_addr'] = "localhost:5000"

  ci_runner:
    image: gitlab/gitlab-runner:alpine
    depends_on:
    - gitlab
    restart: always
    volumes:
    - ./gitlab/runner:/etc/gitlab-runner:Z
    networks:
      cicd:
        ipv4_address: 172.19.0.9
        aliases:
        - runner_com
#    environment:
#    - DOCKER_HOST="tcp://172.19.0.8:2375"
  registry:
    # Documentaćão para deploy no registro >> https://docs.docker.com/registry/deploying/
    image: registry:2
    ports:
    - 9001:5000
    expose:
    - "5000"
    - "9001"
    volumes:
    - ./gitlab/shared/registry:/registry
    - ./certs:/certs
#    external_links:
#    - "gitlab:gitlab"
    environment:
    - REGISTRY_LOG_LEVEL=info
    - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/registry
    - REGISTRY_STORAGE_DELETE_ENABLED=true
    - REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR=redis
    - REGISTRY_REDIS_ADDR=redis:v
    - REGISTRY_HTTP_SECRET=registrysegredo
#   - REGISTRY_AUTH_TOKEN_REALM=https://172.19.0.3/jwt/auth
#   - REGISTRY_AUTH_TOKEN_SERVICE=container_registry
#   - REGISTRY_AUTH_TOKEN_ISSUER=gitlab-issuer
#   - REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/certs/registry.crt

    networks:
      cicd:
        ipv4_address: 172.19.0.7
        aliases:
        - registry_com
    restart: always
  jenkins:
    image: jenkins/jenkins:lts
    networks:
      cicd:
        ipv4_address: 172.19.0.2
        aliases:
        - jenkins_com
    privileged: true
    restart: always
    user: root
    ports:
    - 8083:8080
    - 50000:50000
    volumes:
    - ~/jenkins_data:/var/jenkins_home
    - /var/run/docker.sock:/var/run/docker.sock
    - ./data/scripts:/usr/sbin/init
#    entrypoint: /usr/sbin/init/install_docker.sh
#    environment:
#    - DOCKER_HOST=tcp://172.19.0.8:2376
#    - DOCKER_CERT_PATH=/certs/client
#    - DOCKER_TLS_CERTDIR=/certs/client
#    - DOCKER_TLS_VERIFY=1
#    group_add:
#    - 998 #docker group id
#    command: /bin/sh -c "/usr/sbin/init/install_docker.sh"
  dind:
    # https://piotrminkowski.wordpress.com/tag/continuous-delivery/
    # https://www.youtube.com/watch?v=GLiCeMO35qE
    # Essa imagem precisou se criada do zero para atender a registrys não seguros
    #   para isso foi usada como base a imagem do enderećo https://github.com/piomin/jenkins-slave-dind-jnlp
    # Comando para visualizar os registryes inseguros
    # >> docker info| grep -A 20 "Insecure Registries"
    #image: piomin/jenkins-slave-dind-jnlp     
    build: 
      context: ./JenkinsAgentImage/jenkins-slave-dind-jnlp
      dockerfile: Dockerfile-criacao
    depends_on:
    - jenkins
    networks:
      cicd:
        ipv4_address: 172.19.0.8
    environment:
    - JENKINS_SLAVE_SECRET=b7fe13b367b97e2f5174badc8b64cee8e23035ad4254a40411426a9c2590bf0c
    - JENKINS_SLAVE_NAME=dind-node
    - JENKINS_URL=http://jenkins_com:8080
#    - CI_SERVER_URL=http://gitlab_com
    privileged: true

networks:
  cicd:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.19.0.0/24
          gateway: 172.19.0.1
volumes:
    gitlab-data:
    gitlab-logs:
    postgresql:
    redis:
